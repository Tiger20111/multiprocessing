package locks;

import java.util.concurrent.locks.*;

public class SimpleReadWriteLock implements ReadWriteLock {
    int readers;
    boolean writer;
    Lock lock;
    Condition condition;
    Lock readLock, writeLock;

    public SimpleReadWriteLock() {
        writer = false;
        readers = 0;
        lock = new ReentrantLock();
        readLock = new ReadLock();
        writeLock = new WriteLock();
        condition = lock.newCondition();
    }
    public Lock readLock() {
        return readLock;
    }
    public Lock writeLock() {
        return writeLock;
    }

    class ReadLock implements Lock {
        public void lock() {
            lock.lock();
            try {
                while (writer) {
                    condition.await();
                }
                readers++;
            } finally {
                lock.unlock();
            }
        }

        public void unlock() {
            lock.lock();
            try {
                readers--;
                if (readers == 0)
                    condition.signalAll();
            } finally {
                lock.unlock();
            }
        }
    }
    protected class WriteLock implements Lock {
        public void lock() {
            lock.lock();
            try {
                while (readers > 0 || writer) {
                      condition.await();
                }
                writer = true;
            } finally {
                lock.unlock();
            }
        }
        public void unlock() {
            lock.lock();
            try {
                 writer = false;
                 condition.signalAll();
            } finally {
                lock.unlock();
            }
        }
    }
}
